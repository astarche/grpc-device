
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Proto file for the NI-DAQMX Metadata
//---------------------------------------------------------------------
syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.ni.grpc.nidaqmx";
option java_outer_classname = "NiDAQmx";
option csharp_namespace = "NationalInstruments.Grpc.NiDAQmx";

package nidaqmx_grpc;

import "session.proto";

service NiDAQmx {
  rpc AddGlobalChansToTask(AddGlobalChansToTaskRequest) returns (AddGlobalChansToTaskResponse);
  rpc ClearTask(ClearTaskRequest) returns (ClearTaskResponse);
  rpc CreateAIVoltageChan(CreateAIVoltageChanRequest) returns (CreateAIVoltageChanResponse);
  rpc CreateAOVoltageChan(CreateAOVoltageChanRequest) returns (CreateAOVoltageChanResponse);
  rpc CreateDIChan(CreateDIChanRequest) returns (CreateDIChanResponse);
  rpc CreateDOChan(CreateDOChanRequest) returns (CreateDOChanResponse);
  rpc CreateTask(CreateTaskRequest) returns (CreateTaskResponse);
  rpc GetNthTaskChannel(GetNthTaskChannelRequest) returns (GetNthTaskChannelResponse);
  rpc GetNthTaskDevice(GetNthTaskDeviceRequest) returns (GetNthTaskDeviceResponse);
  rpc IsTaskDone(IsTaskDoneRequest) returns (IsTaskDoneResponse);
  rpc ReadAnalogF64(ReadAnalogF64Request) returns (ReadAnalogF64Response);
  rpc ReadDigitalU16(ReadDigitalU16Request) returns (ReadDigitalU16Response);
  rpc ReadDigitalU8(ReadDigitalU8Request) returns (ReadDigitalU8Response);
  rpc StartTask(StartTaskRequest) returns (StartTaskResponse);
  rpc StopTask(StopTaskRequest) returns (StopTaskResponse);
  rpc TaskControl(TaskControlRequest) returns (TaskControlResponse);
  rpc WaitUntilTaskDone(WaitUntilTaskDoneRequest) returns (WaitUntilTaskDoneResponse);
  rpc WriteAnalogF64(WriteAnalogF64Request) returns (WriteAnalogF64Response);
  rpc WriteDigitalU16(WriteDigitalU16Request) returns (WriteDigitalU16Response);
  rpc WriteDigitalU8(WriteDigitalU8Request) returns (WriteDigitalU8Response);
}

enum NiDAQmxAttributes {
  NIDAQMX_ATTRIBUTE_UNSPECIFIED = 0;
}

enum GroupBy {
  option allow_alias = true;
  GROUP_BY_UNSPECIFIED = 0;
  GROUP_BY_GROUP_BY_CHANNEL = 0;
  GROUP_BY_GROUP_BY_SCAN_NUMBER = 1;
}

enum InputTermCfgWithDefault {
  INPUT_TERM_CFG_WITH_DEFAULT_UNSPECIFIED = 0;
  INPUT_TERM_CFG_WITH_DEFAULT_CFG_DEFAULT = -1;
  INPUT_TERM_CFG_WITH_DEFAULT_RSE = 10083;
  INPUT_TERM_CFG_WITH_DEFAULT_NRSE = 10078;
  INPUT_TERM_CFG_WITH_DEFAULT_DIFF = 10106;
  INPUT_TERM_CFG_WITH_DEFAULT_PSEUDO_DIFF = 12529;
}

enum LineGrouping {
  option allow_alias = true;
  LINE_GROUPING_UNSPECIFIED = 0;
  LINE_GROUPING_CHAN_FOR_ALL_LINES = 1;
  LINE_GROUPING_CHAN_PER_LINE = 0;
}

enum TaskControlAction {
  option allow_alias = true;
  TASK_CONTROL_ACTION_UNSPECIFIED = 0;
  TASK_CONTROL_ACTION_TASK_START = 0;
  TASK_CONTROL_ACTION_TASK_STOP = 1;
  TASK_CONTROL_ACTION_TASK_VERIFY = 2;
  TASK_CONTROL_ACTION_TASK_COMMIT = 3;
  TASK_CONTROL_ACTION_TASK_RESERVE = 4;
  TASK_CONTROL_ACTION_TASK_UNRESERVE = 5;
  TASK_CONTROL_ACTION_TASK_ABORT = 6;
}

enum VoltageUnits2 {
  VOLTAGE_UNITS2_UNSPECIFIED = 0;
  VOLTAGE_UNITS2_VOLTS = 10348;
  VOLTAGE_UNITS2_FROM_CUSTOM_SCALE = 10065;
}

message AddGlobalChansToTaskRequest {
  nidevice_grpc.Session task = 1;
  string channel_names = 2;
}

message AddGlobalChansToTaskResponse {
  int32 status = 1;
}

message ClearTaskRequest {
  nidevice_grpc.Session task = 1;
}

message ClearTaskResponse {
  int32 status = 1;
}

message CreateAIVoltageChanRequest {
  nidevice_grpc.Session task = 1;
  string physical_channel = 2;
  string name_to_assign_to_channel = 3;
  oneof terminal_config_enum {
    InputTermCfgWithDefault terminal_config = 4;
    int32 terminal_config_raw = 5;
  }
  double min_val = 6;
  double max_val = 7;
  oneof units_enum {
    VoltageUnits2 units = 8;
    int32 units_raw = 9;
  }
  string custom_scale_name = 10;
}

message CreateAIVoltageChanResponse {
  int32 status = 1;
}

message CreateAOVoltageChanRequest {
  nidevice_grpc.Session task = 1;
  string physical_channel = 2;
  string name_to_assign_to_channel = 3;
  double min_val = 4;
  double max_val = 5;
  oneof units_enum {
    VoltageUnits2 units = 6;
    int32 units_raw = 7;
  }
  string custom_scale_name = 8;
}

message CreateAOVoltageChanResponse {
  int32 status = 1;
}

message CreateDIChanRequest {
  nidevice_grpc.Session task = 1;
  string lines = 2;
  string name_to_assign_to_lines = 3;
  oneof line_grouping_enum {
    LineGrouping line_grouping = 4;
    int32 line_grouping_raw = 5;
  }
}

message CreateDIChanResponse {
  int32 status = 1;
}

message CreateDOChanRequest {
  nidevice_grpc.Session task = 1;
  string lines = 2;
  string name_to_assign_to_lines = 3;
  oneof line_grouping_enum {
    LineGrouping line_grouping = 4;
    int32 line_grouping_raw = 5;
  }
}

message CreateDOChanResponse {
  int32 status = 1;
}

message CreateTaskRequest {
  string session_name = 1;
}

message CreateTaskResponse {
  int32 status = 1;
  nidevice_grpc.Session task = 2;
}

message GetNthTaskChannelRequest {
  nidevice_grpc.Session task = 1;
  uint32 index = 2;
  int32 buffer_size = 3;
}

message GetNthTaskChannelResponse {
  int32 status = 1;
  string buffer = 2;
}

message GetNthTaskDeviceRequest {
  nidevice_grpc.Session task = 1;
  uint32 index = 2;
  int32 buffer_size = 3;
}

message GetNthTaskDeviceResponse {
  int32 status = 1;
  string buffer = 2;
}

message IsTaskDoneRequest {
  nidevice_grpc.Session task = 1;
}

message IsTaskDoneResponse {
  int32 status = 1;
  bool is_task_done = 2;
}

message ReadAnalogF64Request {
  nidevice_grpc.Session task = 1;
  int32 num_samps_per_chan = 2;
  double timeout = 3;
  oneof fill_mode_enum {
    GroupBy fill_mode = 4;
    int32 fill_mode_raw = 5;
  }
  uint32 array_size_in_samps = 6;
}

message ReadAnalogF64Response {
  int32 status = 1;
  repeated double read_array = 2;
  int32 samps_per_chan_read = 3;
}

message ReadDigitalU16Request {
  nidevice_grpc.Session task = 1;
  int32 num_samps_per_chan = 2;
  double timeout = 3;
  oneof fill_mode_enum {
    GroupBy fill_mode = 4;
    int32 fill_mode_raw = 5;
  }
  uint32 array_size_in_samps = 6;
}

message ReadDigitalU16Response {
  int32 status = 1;
  repeated uint32 read_array = 2;
  int32 samps_per_chan_read = 3;
}

message ReadDigitalU8Request {
  nidevice_grpc.Session task = 1;
  int32 num_samps_per_chan = 2;
  double timeout = 3;
  oneof fill_mode_enum {
    GroupBy fill_mode = 4;
    int32 fill_mode_raw = 5;
  }
  uint32 array_size_in_samps = 6;
}

message ReadDigitalU8Response {
  int32 status = 1;
  bytes read_array = 2;
  int32 samps_per_chan_read = 3;
}

message StartTaskRequest {
  nidevice_grpc.Session task = 1;
}

message StartTaskResponse {
  int32 status = 1;
}

message StopTaskRequest {
  nidevice_grpc.Session task = 1;
}

message StopTaskResponse {
  int32 status = 1;
}

message TaskControlRequest {
  nidevice_grpc.Session task = 1;
  oneof action_enum {
    TaskControlAction action = 2;
    int32 action_raw = 3;
  }
}

message TaskControlResponse {
  int32 status = 1;
}

message WaitUntilTaskDoneRequest {
  nidevice_grpc.Session task = 1;
  double time_to_wait = 2;
}

message WaitUntilTaskDoneResponse {
  int32 status = 1;
}

message WriteAnalogF64Request {
  nidevice_grpc.Session task = 1;
  int32 num_samps_per_chan = 2;
  bool auto_start = 3;
  double timeout = 4;
  oneof data_layout_enum {
    GroupBy data_layout = 5;
    int32 data_layout_raw = 6;
  }
  repeated double write_array = 7;
}

message WriteAnalogF64Response {
  int32 status = 1;
  int32 samps_per_chan_written = 2;
}

message WriteDigitalU16Request {
  nidevice_grpc.Session task = 1;
  int32 num_samps_per_chan = 2;
  bool auto_start = 3;
  double timeout = 4;
  oneof data_layout_enum {
    GroupBy data_layout = 5;
    int32 data_layout_raw = 6;
  }
  repeated uint32 write_array = 7;
}

message WriteDigitalU16Response {
  int32 status = 1;
  int32 samps_per_chan_written = 2;
}

message WriteDigitalU8Request {
  nidevice_grpc.Session task = 1;
  int32 num_samps_per_chan = 2;
  bool auto_start = 3;
  double timeout = 4;
  oneof data_layout_enum {
    GroupBy data_layout = 5;
    int32 data_layout_raw = 6;
  }
  bytes write_array = 7;
}

message WriteDigitalU8Response {
  int32 status = 1;
  int32 samps_per_chan_written = 2;
}

