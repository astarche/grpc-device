
//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// EXPERIMENTAL Client convenience wrapper for NI-XNETSOCKET.
//---------------------------------------------------------------------
#include "nixnetsocket_client.h"

#include <grpcpp/grpcpp.h>

#include <nixnetsocket.grpc.pb.h>

#include <cstdint>
#include <memory>
#include <stdexcept>
#include <vector>

namespace nixnetsocket_grpc::experimental::client {

BindResponse
bind(const StubPtr& stub, const nidevice_grpc::Session& socket, const SockAddr& name)
{
  ::grpc::ClientContext context;

  auto request = BindRequest{};
  request.mutable_socket()->CopyFrom(socket);
  request.mutable_name()->CopyFrom(name);

  auto response = BindResponse{};

  raise_if_error(
      stub->Bind(&context, request, &response));

  return response;
}

CloseResponse
close(const StubPtr& stub, const nidevice_grpc::Session& socket)
{
  ::grpc::ClientContext context;

  auto request = CloseRequest{};
  request.mutable_socket()->CopyFrom(socket);

  auto response = CloseResponse{};

  raise_if_error(
      stub->Close(&context, request, &response));

  return response;
}

GetLastErrorNumResponse
get_last_error_num(const StubPtr& stub)
{
  ::grpc::ClientContext context;

  auto request = GetLastErrorNumRequest{};

  auto response = GetLastErrorNumResponse{};

  raise_if_error(
      stub->GetLastErrorNum(&context, request, &response));

  return response;
}

GetLastErrorStrResponse
get_last_error_str(const StubPtr& stub, const pb::uint64& buf_len)
{
  ::grpc::ClientContext context;

  auto request = GetLastErrorStrRequest{};
  request.set_buf_len(buf_len);

  auto response = GetLastErrorStrResponse{};

  raise_if_error(
      stub->GetLastErrorStr(&context, request, &response));

  return response;
}

IpStackClearResponse
ip_stack_clear(const StubPtr& stub, const nidevice_grpc::Session& stack_ref)
{
  ::grpc::ClientContext context;

  auto request = IpStackClearRequest{};
  request.mutable_stack_ref()->CopyFrom(stack_ref);

  auto response = IpStackClearResponse{};

  raise_if_error(
      stub->IpStackClear(&context, request, &response));

  return response;
}

IpStackCreateResponse
ip_stack_create(const StubPtr& stub, const pb::string& stack_name, const pb::string& config)
{
  ::grpc::ClientContext context;

  auto request = IpStackCreateRequest{};
  request.set_stack_name(stack_name);
  request.set_config(config);

  auto response = IpStackCreateResponse{};

  raise_if_error(
      stub->IpStackCreate(&context, request, &response));

  return response;
}

SocketResponse
socket(const StubPtr& stub, const nidevice_grpc::Session& stack_ref, const pb::int32& domain, const pb::int32& type, const pb::int32& prototcol)
{
  ::grpc::ClientContext context;

  auto request = SocketRequest{};
  request.mutable_stack_ref()->CopyFrom(stack_ref);
  request.set_domain(domain);
  request.set_type(type);
  request.set_prototcol(prototcol);

  auto response = SocketResponse{};

  raise_if_error(
      stub->Socket(&context, request, &response));

  return response;
}


} // namespace nixnetsocket_grpc::experimental::client
