//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-XNET Metadata
//---------------------------------------------------------------------
#include "nixnet_library.h"

#if defined(_MSC_VER)
static const char* kLibraryName = "nixnet.dll";
#else
static const char* kLibraryName = "liblibnixnet.so.so";
#endif

namespace nixnet_grpc {

NiXnetLibrary::NiXnetLibrary() : shared_library_(kLibraryName)
{
  shared_library_.load();
  bool loaded = shared_library_.is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.CreateSession = reinterpret_cast<CreateSessionPtr>(shared_library_.get_function_pointer("nxCreateSession"));
  function_pointers_.Clear = reinterpret_cast<ClearPtr>(shared_library_.get_function_pointer("nxClear"));
}

NiXnetLibrary::~NiXnetLibrary()
{
}

::grpc::Status NiXnetLibrary::check_function_exists(std::string functionName)
{
  return shared_library_.function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

nxSessionRef_t NiXnetLibrary::CreateSession(const char* databaseName, const char* clusterName, const char* list, const char* interfaceParameter, u32 mode, nxSessionRef_t* session)
{
  if (!function_pointers_.CreateSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxCreateSession.");
  }
#if defined(_MSC_VER)
  return nxCreateSession(databaseName, clusterName, list, interfaceParameter, mode, session);
#else
  return function_pointers_.CreateSession(databaseName, clusterName, list, interfaceParameter, mode, session);
#endif
}

nxSessionRef_t NiXnetLibrary::Clear(nxSessionRef_t session)
{
  if (!function_pointers_.Clear) {
    throw nidevice_grpc::LibraryLoadException("Could not find nxClear.");
  }
#if defined(_MSC_VER)
  return nxClear(session);
#else
  return function_pointers_.Clear(session);
#endif
}

}  // namespace nixnet_grpc
