<%
import cmake_helpers
import common_helpers

config = data["config"]
module_name = config["module_name"]
service_library_name = cmake_helpers.service_library_name(module_name)
%>\
#---------------------------------------------------------------------
# This file is automatically generated. All manual edits will be lost.
#---------------------------------------------------------------------
# CMakeLists.txt for the ${config["driver_name"]} Metadata
#---------------------------------------------------------------------

list(APPEND CMAKE_MODULE_PATH "${r"${CMAKE_CURRENT_SOURCE_DIR}"}/cmake")
include(GenerateGrpcSources)
include(GenerateServices)

set(metadata_files
% for metadata_file in cmake_helpers.list_metadata_files(r"${metadata_dir}", module_name):
  ${metadata_file}
% endfor
)

set(output_files
% for output_file in cmake_helpers.list_output_files(config, r"${service_output_dir}"):
  ${output_file}
% endfor
)

<%
generate_sources = cmake_helpers.create_generate_sources_request(
  module_name,
  r"${proto_srcs_dir}", 
  r"${service_output_dir}")
%>\
GenerateGrpcSources(
  ${generate_sources.proto_file}
  ${generate_sources.proto_path}
  ${generate_sources.proto_srcs}
  ${generate_sources.proto_hdrs}
  ${generate_sources.grpc_srcs}
  ${generate_sources.grpc_hdrs}
)

GenerateServices(
  ${module_name}
  ${r"${metadata_files}"}
  ${r"${output_files}"}
)

add_library(${service_library_name}
  ${generate_sources.proto_srcs}
  ${generate_sources.grpc_srcs}
% for output_file in cmake_helpers.list_output_cpp_files(config, r"${service_output_dir}"):
  ${output_file}
% endfor
  ${cmake_helpers.get_custom_cpp_path(r"${custom_dir}", module_name)}
)

target_link_libraries(${service_library_name}
  ni_grpc_device_server_core
  ${r"${_GRPC_GRPCPP}"}
  ${r"${CMAKE_DL_LIBS}"}
)

<%
static_library_name = config["library_info"]["Windows"]["64bit"].get("static_name", None)
dll_name = config["library_info"]["Windows"]["64bit"]["name"]
%>\
% if static_library_name:
if(WIN32)
  target_link_libraries(${service_library_name} 
    Delayimp
    ${r"${CMAKE_CURRENT_SOURCE_DIR}"}/../../imports/lib/win64/${static_library_name}.lib
  )
  target_link_options(${service_library_name} 
    INTERFACE
      "/DELAYLOAD:${dll_name}"
  )
endif()
% endif

target_include_directories(${service_library_name}
  PUBLIC 
    ${r"${proto_srcs_dir}"} 
  PRIVATE
    "./"
  INTERFACE
    "../"
)
